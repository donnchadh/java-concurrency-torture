<testsuite suite="Singleton tests">

    <test name="net.shipilev.concurrent.torture.tests.singletons.UnsafeDCLSingletonTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests the broken DCL-style singleton.
        </description>
        <case>
            <match>[0]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                Factory returned null singleton. This is the major correctness issue.
            </description>
        </case>
        <case>
            <match>[1]</match>
            <outcome>NEGATIVE_MISSING</outcome>
            <description>
                The reference field in singleton is null.
                This is the violation of singleton contract, but legal JMM behavior.
            </description>
        </case>
        <case>
            <match>[42]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The singleton is observed in fully-constructed way.
            </description>
        </case>
        <unmatched>
            <outcome>NEGATIVE_MISSING</outcome>
            <description>
                This should be under-uninitialized case. This is a correct JMM behavior.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.singletons.SafeDCLSingletonTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests the safe DCL-style singleton.
        </description>
        <case>
            <match>[0]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                Factory returned null singleton. This is the major correctness issue.
            </description>
        </case>
        <case>
            <match>[1]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                The reference field in singleton is null.
                This is forbidden by JMM.
            </description>
        </case>
        <case>
            <match>[42]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The singleton is observed in fully-constructed way.
            </description>
        </case>
        <unmatched>
            <outcome>NEGATIVE_MISSING</outcome>
            <description>
                This should be under-uninitialized case. This is a correct JMM behavior.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.singletons.HolderSingletonTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests the Holder-idiom singleton.
        </description>
        <case>
            <match>[0]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                Factory returned null singleton. This is the major correctness issue.
            </description>
        </case>
        <case>
            <match>[1]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                The reference field in singleton is null.
                This is forbidden by JMM.
            </description>
        </case>
        <case>
            <match>[42]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The singleton is observed in fully-constructed way.
            </description>
        </case>
        <unmatched>
            <outcome>NEGATIVE_MISSING</outcome>
            <description>
                This should be under-uninitialized case. This is a correct JMM behavior.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.singletons.FinalWrapperSingletonTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests the final wrapper case.
        </description>
        <case>
            <match>[0]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                Factory returned null singleton. This is the major correctness issue.
            </description>
        </case>
        <case>
            <match>[1]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                The reference field in singleton is null.
                This is forbidden by JMM.
            </description>
        </case>
        <case>
            <match>[42]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The singleton is observed in fully-constructed way.
            </description>
        </case>
        <unmatched>
            <outcome>NEGATIVE_MISSING</outcome>
            <description>
                This should be under-uninitialized case. This is a correct JMM behavior.
            </description>
        </unmatched>
    </test>

</testsuite>