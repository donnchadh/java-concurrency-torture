<testsuite suite="Initialization Tests">

    <test name="net.shipilev.concurrent.torture.tests.init.LongConstrTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive long fields are properly initialized (in constructor).
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <outcome>ACCEPTABLE</outcome>
            <description>
                Seeing the default value for long field. The update to the field in the constructor is lost.
                This is a legal JMM behavior.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[42, 42, 42, 42, 42, 42, 42, 42]</match>
            <outcome>ACCEPTABLE</outcome>
            <description>
                The observer sees the empty shell.
                This is a legal JMM behavior, since there is a race between actor and observer.
            </description>
        </case>
        <unmatched>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.init.LongInstanceTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive long fields are properly initialized (by instance initializer).
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <outcome>ACCEPTABLE</outcome>
            <description>
                Seeing the default value for long field. The update to the field in the constructor is lost.
                This is a legal JMM behavior.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[42, 42, 42, 42, 42, 42, 42, 42]</match>
            <outcome>ACCEPTABLE</outcome>
            <description>
                The observer sees the empty shell.
                This is a legal JMM behavior, since there is a race between actor and observer.
            </description>
        </case>
        <unmatched>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.init.LongFinalTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive long fields are properly initialized (final field set in constructor).
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                Seeing the default value for long field. The update to the field in the constructor is lost.
                This is a legal JMM behavior.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[42, 42, 42, 42, 42, 42, 42, 42]</match>
            <outcome>ACCEPTABLE</outcome>
            <description>
                The observer sees the empty shell.
                This is a legal JMM behavior, since there is a race between actor and observer.
            </description>
        </case>
        <unmatched>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.init.LongVolatileTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests if primitive long fields are properly initialized (volatile field set in constructor).
        </description>
        <case>
            <match>[0, 0, 0, 0, 0, 0, 0, 0]</match>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                Seeing the default value for long field. The update to the field in the constructor is lost.
                This is a legal JMM behavior.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                The value set by the actor thread. Observer sees the complete update.
            </description>
        </case>
        <case>
            <match>[42, 42, 42, 42, 42, 42, 42, 42]</match>
            <outcome>ACCEPTABLE</outcome>
            <description>
                The observer sees the empty shell.
                This is a legal JMM behavior, since there is a race between actor and observer.
            </description>
        </case>
        <unmatched>
            <outcome>POSITIVE_MISSING</outcome>
            <description>
                This case is not expected.
            </description>
        </unmatched>
    </test>

    <test name="net.shipilev.concurrent.torture.tests.volatiles.RacyPublicationTest">
        <contributed-by>Aleksey Shipilev (aleksey.shipilev@oracle.com)</contributed-by>
        <description>
            Tests the races during unsafe publication.
        </description>
        <case>
            <match>[1, 1, 1, 1, 1, 1, 1, 1]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                Seeing the object in fully-constructed way.
            </description>
        </case>
        <case>
            <match>[-1, -1, -1, -1, -1, -1, -1, -1]</match>
            <outcome>POSITIVE_REQUIRED</outcome>
            <description>
                Observer sees null reference to the object.
                This is the correct case, since there is an intrinsic race between actor and observer.
            </description>
        </case>
        <unmatched>
            <outcome>NEGATIVE_MISSING</outcome>
            <description>
                This should be under-uninitialized case. This is a correct JMM behavior.
            </description>
        </unmatched>
    </test>

</testsuite>